From f17b856c5d2ac0933d4a8ef1767e1d97f6b4769e Mon Sep 17 00:00:00 2001
From: Kamil Renczewski <kamil.renczewski@codilime.com>
Date: Thu, 7 Dec 2017 15:45:37 +0100
Subject: [PATCH 16/17] Fixed refreshing elements

---
 terraform_mappings.py | 193 ++++++++++++++++++++++++++------------------------
 1 file changed, 100 insertions(+), 93 deletions(-)

diff --git a/terraform_mappings.py b/terraform_mappings.py
index f3580eb..ea02479 100644
--- a/terraform_mappings.py
+++ b/terraform_mappings.py
@@ -177,10 +177,6 @@ func CheckTerraformMap(x interface{}) bool {
         case string: return true
         case int: return true
     }
-    /*
-    if dict, ok := v.(map[]interface{}); ok {
-        return false // empty map
-    }*/
     return false
 }
 """
@@ -323,11 +319,9 @@ package resources
 
 import (
         "github.com/hashicorp/terraform/helper/schema"
-        "github.com/Skilldus/contrail-go-api"
         "github.com/davecgh/go-spew/spew"
 
         "log"
-        "strings"
 )
 var _ = spew.Dump // Avoid import errors if not used
 """
@@ -340,10 +334,9 @@ var _ = spew.Dump // Avoid import errors if not used
             if deptype.getName() in self._top_level_map:
                 continue
             self._GenerateCType(deptype, file)
-        self._GenerateCTypeTerraformResourceSetFrom(ctype, file)
         self._GenerateCTypeTerraformMapSetFrom(ctype, file)
         self._GenerateCTypeTerraformResourceWriteTo(ctype, file)
-        self._GenerateCTypeTerraformResourceRead(ctype, file)
+        # self._GenerateCTypeTerraformResourceRead(ctype, file)
         self._GenerateCTypeTerraformResource(ctype, file)
         # mark as generated
         ctypename = ctype.getName()
@@ -395,7 +388,6 @@ func %(camel)s() map[string]*schema.Schema {
             val = "val"
             if not is_pod:
                 obj = "\tmember := new(%s)\n" % origtype
-                # setme = "\tSet%(type)sFromResource(member, d, m, key+\"%(name)s\")" % { "type": origtype, "name": member.membername }
                 setme = "\tSet%(type)sFromMap(member, d, m, val)" % {
                     "type": origtype, "name": member.membername}
             if member.isSequence:
@@ -464,26 +456,6 @@ func %(camel)s() map[string]*schema.Schema {
             setters += decl
         return setters
 
-# ------------------- Set From Resource CType -------------------------------
-    def _GenerateCTypeTerraformResourceSetFrom(self, ctype, file):
-        decl = """
-func Set%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interface{}, prefix ...string) {
-\tkey := strings.Join(prefix, ".")
-\tif len(key) != 0 {
-\t\tkey = key + "."
-\t}
-\tlog.Printf("[Set%(camel)sFromResource] key = %%v, prefix = %%v", key, prefix)
-
-\t// SPEW
-\t//log.Print(spew.Sdump(d))
-\t// SPEW
-
-%(setters)s}
-""" %{"camel": ctype.getName(), "setters":
-      '\t'.join(self._GenerateCTypeResourceSetPropertyMethods(ctype).splitlines(True)),
-      "name": ctype.getName()}
-        file.write(decl)
-
 # ------------------- Set From Map CType -------------------------------
     def _GenerateCTypeTerraformMapSetFrom(self, ctype, file):
         decl = """
@@ -496,7 +468,7 @@ func Set%(camel)sFromMap(object *%(name)s, d *schema.ResourceData, m interface{}
 \t}
 
 \t// SPEW
-\t//log.Printf("SPEW: %%v", spew.Sdump(vmap))
+\tlog.Printf("SPEW: %%v", spew.Sdump(vmap))
 \t// SPEW
 
 %(setters)s
@@ -508,49 +480,56 @@ func Set%(camel)sFromMap(object *%(name)s, d *schema.ResourceData, m interface{}
         file.write(decl)
 
 # ------------------- Properties Writer CType -------------------------------
-    def _GenerateCTypeWritePropertyMethods(self, ctype):
+    def _GenerateCTypeMapPropertyMethods(self, ctype):
         writers = "\n"
         for member in ctype.getDataMembers():
             origtype = member.xsd_object.getType()
             gotype = getGoLangType(origtype)
             is_pod = IsPodType(gotype)
             field = CamelCase(member.membername)
-            setter = "d.Set(\"%(name)s\", object.%(field)s)\n" % {
+            setter = "omap[\"%(name)s\"] = object.%(field)s\n" % {
                 "name": member.membername, "field": field}
-            ptr = "" if member.isSequence else "*"
             ttype = TerraformTypeName(origtype, orig_name=True)
             if member.isSequence:
-                setter = """\t%(name)s_arr := make([]%(gotype)s, len(object.%(field)s))
-\tfor _, v := range object.%(field)s {
-\t\t%(name)s_arr = append(%(name)s_arr, v)
-\t}
-\td.Set(\"%(name)s\", %(name)s_arr)\n""" % {
+                setter = """%(name)s_arr := make([]%(gotype)s, len(object.%(field)s))
+for _, v := range object.%(field)s {
+\t%(name)s_arr = append(%(name)s_arr, v)
+}
+omap[\"%(name)s\"] = %(name)s_arr\n""" % {
                     "gotype": gotype,
                     "field": field, "ttype": ttype,
                     "name": member.membername}
-            if not is_pod:
-                setter = "if object.%(member)s != nil {\tWrite%(type)sToResource(%(ptr)sobject.%(member)s, d, m, key + \"%(name)s\")\n}\n" % {
-                    "name": member.membername,
-                    "type": origtype, "member": field,
-                    "ptr": ptr}
-                if member.isSequence:
-                    setter = "// object.%s => DON'T KNOW (yet) HOW TO HANDLE THIS CASE AS TERRAFORM RESOURCES\n" % field
+            if not is_pod:  # COMPLEX type
+                setter = """if object.%(member)s != nil {
+\tomap["%(name)s"] = Take%(type)sAsMap(object.%(member)s)
+}
+""" % \
+                    {"name": member.membername,
+                     "type": origtype, "member": field}
+                if member.isSequence:  # Complex Sequence
+                    setter = """var %(name)s_map []interface{}
+// COMPLEX SEQUENCE
+for _, v := range object.%(field)s {
+\t%(name)s_map = append(%(name)s_map, Take%(type)sAsMap(&v))
+}
+omap[\"%(name)s\"] = %(name)s_map
+""" % {"field": field, "name": member.membername, "gotype": gotype,
+                       "type": origtype}
             writers += setter
         return writers
 
 # ------------------- Write To Resource CType -------------------------------
     def _GenerateCTypeTerraformResourceWriteTo(self, ctype, file):
         decl = """
-func Write%(name)sToResource(object %(name)s, d *schema.ResourceData, m interface{}, prefix ...string) {
-\tkey := strings.Join(prefix, ".")
-\tif len(key) != 0 {
-\t\tkey = key + "."
-\t}
+func Take%(name)sAsMap(object *%(name)s) map[string]interface{} {
+\tomap := make(map[string]interface{})
 %(writers)s
+\treturn omap
 }
-""" %{ "client": self._SnippetGetClient(), "writers":
-      '\t'.join(self._GenerateCTypeWritePropertyMethods(ctype).splitlines(True)),
-      "name": ctype.getName() }
+""" % \
+            {"client": self._SnippetGetClient(),
+             "writers": '\t'.join(self._GenerateCTypeMapPropertyMethods(
+                 ctype).splitlines(True)), "name": ctype.getName()}
         file.write(decl)
 
 # ------------------- Resource CType -------------------------------
@@ -560,10 +539,6 @@ func Write%(name)sToResource(object %(name)s, d *schema.ResourceData, m interfac
         decl = """
 func %(camel)s() *schema.Resource {
 \treturn &schema.Resource{
-//\t\tCreate: %(camel)sCreate,
-//\t\tRead: %(camel)sRead,
-//\t\tUpdate: %(camel)sUpdate,
-//\t\tDelete: %(camel)sDelete,
 \t\tSchema: %(camel)sSchema(),
 \t}
 }
@@ -591,6 +566,7 @@ func %(camel)sCreate(d *schema.ResourceData, m interface{}) error {
     def _GenerateCTypeTerraformResourceRead(self, ctype, file):
         decl = """
 func %(camel)sRead(d *schema.ResourceData, m interface{}) error {
+\tlog.Printf("%(camel)sREAD")
 \t%(client)s
 \treturn nil
 }
@@ -791,8 +767,6 @@ func %(schema)s() map[string]*schema.Schema {
         obj = ""
         val = "val"
         if not is_pod:
-            # val = "_"
-            # obj = "\tmember := new(%(type)s)\n\tSet%(type)sFromResource(member, d, m, key+\"%(name)s\")\n" %\
             obj = "\tmember := new(%(type)s)\n\tSet%(type)sFromMap(member, d, m, (val.([]interface{}))[0])\n" %\
                 {"type": gotype, "name": prop.getCIdentifierName().lower()}
             value = "member"
@@ -890,6 +864,28 @@ func SetRefs%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m in
         file.write(decl)
 
 # ------------------- Property Writer Snippet Object ------------------------
+    def _SnippetMapObjProperty(self, prop):
+        gotype = prop.getGoLangTypename()
+        is_pod = IsPodType(gotype)
+        setter = "omap[\"%(name)s\"] = object.Get%(field)s()\n" % {
+            "name": prop.getCIdentifierName().lower(),
+            "field": prop.getCppName()}
+        if not is_pod:
+            setter = """%(name)sObj := object.Get%(field)s()
+omap[\"%(name)s\"] = Take%(member)sAsMap(&%(name)sObj)\n""" % {
+                "name": prop.getCIdentifierName().lower(),
+                "field": prop.getCppName(),
+                "member": gotype}
+        return setter
+
+# ------------------- Properties Mapper Object -------------------------------
+    def _SnippetMapObjProperties(self, ident):
+        writers = "\n"
+        for prop in ident.getProperties():
+            writers += self._SnippetMapObjProperty(prop)
+        return writers
+
+# ------------------- Property Writer Snippet Object ------------------------
     def _SnippetWriteObjProperty(self, prop):
         gotype = prop.getGoLangTypename()
         is_pod = IsPodType(gotype)
@@ -897,10 +893,12 @@ func SetRefs%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m in
             "name": prop.getCIdentifierName().lower(),
             "field": prop.getCppName()}
         if not is_pod:
-            setter = "Write%(member)sToResource(object.Get%(field)s(), d, m, key + \"%(name)s\")\n" % {
+            setter = """%(name)sObj := object.Get%(field)s()
+//%(name)sMap := Take%(member)sAsMap(&%(name)sObj)
+d.Set(\"%(name)s\", Take%(member)sAsMap(&%(name)sObj))\n""" % {
                 "name": prop.getCIdentifierName().lower(),
                 "field": prop.getCppName(),
-                "member": gotype }
+                "member": gotype}
         return setter
 
 # ------------------- Properties Writer Object -------------------------------
@@ -910,44 +908,25 @@ func SetRefs%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m in
             writers += self._SnippetWriteObjProperty(prop)
         return writers
 
-# ------------------- Properties Updater Object -------------------------------
-    def _SnippetUpdateObjProperties(self, ident):
-        updaters = "\n"
-        for prop in ident.getProperties():
-            updaters += "if d.HasChange(\"%(name)s\") {\n\t%(setter)s}\n" % {
-                "setter": self._SnippetSetObjProperty(prop),
-                "name": prop.getCIdentifierName().lower() }
-        return updaters
-
-# ------------------- Update From Resource Object -----------------------------
-    def _GenerateTerraformResourceUpdateFrom(self, ident, file):
+# ------------------- Write To Resource Object -------------------------------
+    def _GenerateTerraformResourceWriteTo(self, ident, file):
         decl = """
-func Update%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interface{}, prefix ...string) {
-\tkey := strings.Join(prefix, ".")
-\tif len(key) != 0 {
-\t\tkey = key + "."
-\t}
-%(setters)s
+func Write%(camel)sToResource(object %(name)s, d *schema.ResourceData, m interface{}) {
+%(writers)s
 }
-""" %{"camel": ident.getCppName(), "setters":
-      '\t'.join(self._SnippetUpdateObjProperties(ident).splitlines(True)),
-      "name": ident.getCppName()}
+""" % {"camel": ident.getCppName(), "client": self._SnippetGetClient(),
+               "writers": '\t'.join(self._SnippetWriteObjProperties(
+                   ident).splitlines(True)), "name": ident.getCppName()}
         file.write(decl)
-
-# ------------------- Write To Resource Object -------------------------------
-    def _GenerateTerraformResourceWriteTo(self, ident, file):
         decl = """
-func Write%(camel)sToResource(object %(name)s, d *schema.ResourceData, m interface{}, prefix ...string) {
-\tkey := strings.Join(prefix, ".")
-\tif len(key) != 0 {
-\t\tkey = key + "."
-\t}
+func Take%(camel)sAsMap(object *%(name)s) map[string]interface{} {
+\tomap := make(map[string]interface{})
 %(writers)s
+\treturn omap
 }
-""" %{ "camel": ident.getCppName(), "client": self._SnippetGetClient(),
-      "writers":
-      '\t'.join(self._SnippetWriteObjProperties(ident).splitlines(True)),
-      "name": ident.getCppName()}
+""" % {"camel": ident.getCppName(), "client": self._SnippetGetClient(),
+               "writers": '\t'.join(self._SnippetMapObjProperties(
+                   ident).splitlines(True)), "name": ident.getCppName()}
         file.write(decl)
 
 # ------------------- Create Object -------------------------------
@@ -1009,6 +988,7 @@ func %(camel)sRefsCreate(d *schema.ResourceData, m interface{}) error {
 \tif err := client.Update(obj%(type)s); err != nil {
 \t\treturn fmt.Errorf("[%(camel)sRefsCreate] Update refs for resource %(type)s (uuid: %%v) on %%v (%%v)", uuid, client.GetServer(), err)
 \t}
+\td.SetId(obj%(type)s.GetUuid())
 \treturn nil
 }
 """ \
@@ -1023,6 +1003,7 @@ func %(camel)sRefsCreate(d *schema.ResourceData, m interface{}) error {
     def _GenerateTerraformResourceRead(self, ident, need_refs, file):
         decl = """
 func %(camel)sRead(d *schema.ResourceData, m interface{}) error {
+\tlog.Printf("%(camel)sREAD")
 \t%(client)s
 \tbase, err := client.FindByUuid("%(typename)s", d.Id())
 \tif err != nil {
@@ -1041,11 +1022,37 @@ func %(camel)sRead(d *schema.ResourceData, m interface{}) error {
 
         decl = """
 func %(camel)sRefsRead(d *schema.ResourceData, m interface{}) error {
+\tlog.Printf("%(camel)sRefsREAD")
 \treturn nil
 }
 """ % {"camel": ResName(ident.getCppName())}
         file.write(decl)
 
+# ------------------- Properties Updater Object -------------------------------
+    def _SnippetUpdateObjProperties(self, ident):
+        updaters = "\n"
+        for prop in ident.getProperties():
+            updaters += "if d.HasChange(\"%(name)s\") {\n\t%(setter)s}\n" % {
+                "setter": self._SnippetSetObjProperty(prop),
+                "name": prop.getCIdentifierName().lower()}
+        return updaters
+
+# ------------------- Update From Resource Object -----------------------------
+    def _GenerateTerraformResourceUpdateFrom(self, ident, file):
+        decl = """
+func Update%(camel)sFromResource(object *%(name)s, d *schema.ResourceData, m interface{}, prefix ...string) {
+\tkey := strings.Join(prefix, ".")
+\tif len(key) != 0 {
+\t\tkey = key + "."
+\t}
+%(setters)s
+}
+        """ % {"camel": ident.getCppName(), "setters":
+               '\t'.join(self._SnippetUpdateObjProperties(
+                   ident).splitlines(True)),
+               "name": ident.getCppName()}
+        file.write(decl)
+
 # ------------------- Update Object -------------------------------
     def _GenerateTerraformResourceUpdate(self, ident, need_refs, file):
         decl = """
-- 
2.7.4

